service:
  name: backend-SDC
# app and org for use with dashboard.serverless.com
  app: suspect-detection-cloud
  org: juadel.com

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: false

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}
  
  tracing:
      lambda: true
      apiGateway: true 
  
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SUSPECTS_TABLE: SDC-Suspects-table-${self:provider.stage}
    SETTINGS_TABLE: SDC-Settings-table-${self:provider.stage}
    SDC_BUCKET: SDC-Settings-table-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    USER_POOL: SDC-Users-Pool-${self:provider.stage}

  
  iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

customs:
  documentation:
    api:
      info:
        version: v1
        title: SDC backend API 
        description: Serverless backend for SDC 
    models:
      - name: createSuspectRequest
        contentType: application/json
        schema: ${file(ValidationModels/createSuspectRequest.json)}

functions:
  createCamSet:
    handler: src/Lambda/http/createSettings.handler
    events:
      - http:
          method: POST
          path: camset
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { "Ref": "ApiGatewayAuthorizer"}
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-CreateCamSettings-Role-${self:service.org}-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SETTINGS_TABLE}

resources:
  Resources:

    MyRequestValidator:  
          Type: "AWS::ApiGateway::RequestValidator"
          Properties:
            Name: 'SDC-req-validator'
            RestApiId: 
              Ref: ApiGatewayRestApi
            ValidateRequestBody: true
            ValidateRequestParameters: false  
    GatewayResponseDefault4XX:
        Type: AWS::ApiGateway::GatewayResponse
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: ApiGatewayRestApi

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]         

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL}
        GenerateSecret: False 
        UserPoolId:
          Ref: CognitoUserPool       

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties: 
        MfaConfiguration: OFF
        UserPoolName: ${self:provider.environment.USER_POOL}
        AliasAttributes:
          - preferred_username
          - email
        AutoVerifiedAttributes:
          - email  
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False 
            RequireUppercase: True 
    
    
    SuspectsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S
            - AttributeName: name
              AttributeType: S
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: name 
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.SUSPECTS_TABLE}
          
    SettingsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S
            - AttributeName: cameraId
              AttributeType: S
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: cameraId 
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.SETTINGS_TABLE}
    
    SDCBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.SDC_BUCKET}
          CorsConfiguration:
            CorsRules:
              - AllowedOrigins:
                  - "*"
                AllowedHeaders:
                  - "*"
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
                MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.SDC_BUCKET}/*"
        Bucket: !Ref SDCBucket
    
    